<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>skiplist on BadFd</title>
    <link>/tags/skiplist/</link>
    <description>Recent content in skiplist on BadFd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 01 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="/tags/skiplist/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>算法笔记： 跳表</title>
      <link>/posts/algmnotes-skiplist/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/algmnotes-skiplist/</guid>
      <description>这是读书时一篇旧文搬运.几年后再次回顾下算法.
 跳表是一种著名数据结构。
 原理应该不用介绍了，rocksdb/redis内部都有使用skiplist。
相对于红黑树，它的优势我认为是实现简单，并且容易无锁化。
本文主要讨论：
 skiplist一些性质分析 skiplist核心思想&amp;amp;核心问题 rocksdb中的跳表实现分析  skiplist原理 property of a node   a node of skiplist   Q：给定某个skiplist的节点$x$,其含有以下4个level的next值：a(lvl=3),b(lvl=2),c(lvl=1),d(lvl=0),问：x,a,b,c,d之间满足什么关系？
A：$a &amp;gt; b &amp;gt; c &amp;gt; d &amp;gt; x$ (是否带等号看具体实现), 且lvl指向的子链表含有的元素的范围是 $$(next[lvl],next[lvl+1])$$
key-idea  跳表 = 有序链表 + 索引节点 查找：利用索引，理想状态下可以达到logn级别复杂度。  给定key的查找过：需要从最高level开始，逐步下降，直到lvl=0，每下降一个level就缩小了查找区间的范围。   插入/删除：如果该节点涉及多个level，需要变更所有level的前驱和后继。  实现细节：
  思路就是每一层都是一个有序链表，lvl+1层是lvl层的索引。（索引本身也是数据）
  给定一个key值，可以找到一个前驱数组prev[...]（所有level比key小的最后一个节点）。
  任意前驱数组元素prev[i],满足性质： $$ 对于 i \in [0，currmax], 有： \
prev[i].key &amp;lt; key \qquad 且 \</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bad Fd</title>
    <link>/</link>
    <description>Recent content on Bad Fd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 01 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>算法笔记： 跳表(r1)</title>
      <link>/posts/algmnotes-skiplist/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/algmnotes-skiplist/</guid>
      <description>这是读书时一篇旧文搬运.几年后再次回顾下算法.
 跳表是一种著名数据结构。
 原理应该不用介绍了，rocksdb/redis内部都有使用skiplist。
相对于红黑树，它的优势我认为是实现简单，并且容易无锁化。
本文主要讨论：
 skiplist一些性质分析 skiplist核心思想&amp;amp;核心问题 rocksdb中的跳表实现分析  skiplist原理 property of a node   a node of skiplist     性质1：
 Q：给定某个skiplist的节点$x$,其含有以下4个level的next值：a(lvl=3),b(lvl=2),c(lvl=1),d(lvl=0),问：x,a,b,c,d之间满足什么关系？ A： $$ a &amp;gt; b &amp;gt; c &amp;gt; d &amp;gt; x $$ (是否带等号看具体实现), 且lvl指向的子链表含有的元素的范围是 $$(next[lvl],next[lvl+1])$$    性质2： L0层节点是整个跳表的所有数据，每上一层都是前一层的子集。
  key-idea  跳表 = 有序链表 + 索引节点 查找：利用索引，理想状态下可以达到logn级别复杂度。  给定key的查找过：需要从最高level开始，逐步下降，直到lvl=0，每下降一个level就缩小了查找区间的范围。   插入/删除：如果该节点涉及多个level，需要变更所有level的前驱和后继。  实现细节：
  思路就是每一层都是一个有序链表，lvl+1层是lvl层的索引。（索引本身也是数据）</description>
    </item>
    
    <item>
      <title>算法笔记：跳表（r2）</title>
      <link>/posts/algmnotes-skiplist-impl/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/algmnotes-skiplist-impl/</guid>
      <description>实现一个skiplist 上一篇笔记里回顾了跳表的性质和思想，并且看了一眼rocksdb里的skiplist实现。
然后由于好奇，我自己写了一个skiplist，这里记录下。
该skiplist的特性：
 不支持concurrent 没有struct hack 没有fast path 因为使用了template所以是header only的 格式化依赖了fmt，日志依赖了spdlog 支持graphviz脚本输出  基本上中规中矩的一个实现，亮点是该skiplist可以输出一个graphviz的脚本，可以让我们很方便地调试和理解。
如：
./skiplist_test.out --gtest_filter=skiplist.insert5 digraph { rankdir=LR node [shape=record] nodesep=0 N0[label=&amp;quot;&amp;lt;l0&amp;gt;HEAD&amp;quot;] N1[label=&amp;quot;&amp;lt;l0&amp;gt;10&amp;quot;] N2[label=&amp;quot;&amp;lt;l0&amp;gt;20&amp;quot;] N4[label=&amp;quot;&amp;lt;l0&amp;gt;30&amp;quot;] N3[label=&amp;quot;&amp;lt;l0&amp;gt;40&amp;quot;] N5[label=&amp;quot;&amp;lt;l0&amp;gt;50&amp;quot;] N0:l0-&amp;gt;N1:l0 N1:l0-&amp;gt;N2:l0 N2:l0-&amp;gt;N4:l0 N4:l0-&amp;gt;N3:l0 N3:l0-&amp;gt;N5:l0 } 输出一个5节点的skiplist，可以随意找个graphviz在线画图的网站
上面这个我们可以得到：   a skiplist of 5 nodes   当然这个实现可以用于leetcode1206的答题。加个warpper就可以了，可参考相关测试。
以上。</description>
    </item>
    
    <item>
      <title>rocksdb探究 - 一些问题</title>
      <link>/posts/db_some_questions_about_rocksdb/</link>
      <pubDate>Tue, 07 Jan 2020 21:26:49 +0800</pubDate>
      
      <guid>/posts/db_some_questions_about_rocksdb/</guid>
      <description> 写请求batch内的多个操作是否会被拆开，为什么？ block-cache里的缓存项是否会因为某个sst被compact而失效？ event-listener的实现 perf-context的实现 ThreadLocalPtr的实现以及为什么 ROCKSDB中的MVCC rocksdb读路径下的各种迭代器/各层cache分析 env分析和使用  </description>
    </item>
    
    <item>
      <title>c&#43;&#43;服务端rpc笔记：读muduo有感</title>
      <link>/posts/cppnote-server_rpc_notes/</link>
      <pubDate>Sat, 01 Dec 2018 21:26:49 +0800</pubDate>
      
      <guid>/posts/cppnote-server_rpc_notes/</guid>
      <description>最近比较详细地缕了一遍公司内部另一个团队的存储产品（基于apache thrift），后简称为A。到目前为止，本团队存储产品自研的rpc框架，加上自己写过一个简单rpc框架用于rdb实例分裂，已经接触了3个rpc框架。准备在这篇文章总结下一些个人感想。
连接处理模型   A的服务端：使用thrift-rpc的nonblock-server，连接处理模型是同步的： a. io线程在收到一个包后，会先把自己设为idle（具体点就是摘掉本线程上的可读写事件），扔给worker线程处理完成后再加回来。
  A的cli端的处理是同步的： a. 一条连接发完一个包，会等待对应的收包（如果需要的话）。
  结合上述两点，整体上看这个系统的吞吐不会很高，起码网络rpc这块，由于基本上pipeline的长度只有1，我甚至怀疑后端被打满会比较吃力。
锁  thrift内部随处可见都是锁：例如，worker线程池公用一条处理队列，这个队列是由一把大锁来保护的。  基本这块我没发现有太大的优化，可以预想的是，随着io线程和worker线程的增加，性能可能无法得到线性扩展。
比较好的设计应该是什么样   善用各种异步pipeline模式
  share-nothing思想
一个线程池共用一个总的大队列 vs. 每个线程内部自己维护队列
  </description>
    </item>
    
    <item>
      <title>智能指针1: shared_ptr使用梳理</title>
      <link>/posts/cppnotes-shared_ptr/</link>
      <pubDate>Sat, 01 Dec 2018 21:26:49 +0800</pubDate>
      
      <guid>/posts/cppnotes-shared_ptr/</guid>
      <description>本文提及并讨论了：
 shared_ptr引入背景 删除器 线程安全性 std::ref 优先使用make_shared enable_shared_from_this 观察者模式和event-listener  缘起   裸指针资源管理内存,容易产生各种内存问题，具体有以下几种类型[1]：
 资源未释放，重复释放，free/delete不匹配 &amp;hellip; 越界/段错误   moduo1.7节讨论了裸指针会有哪些问题.
   不配对的free&amp;amp;delete会有什么问题？ 是未定义行为.可以参考：
 https://stackoverflow.com/questions/10854210/behaviour-of-malloc-with-delete-in-c https://isocpp.org/wiki/faq/freestore-mgmt    基本原理 &amp;amp; 使用  需要一个东西来管理裸指针（资源），当没有人引用资源时，自动地释放它. &amp;mdash; std::shared_ptr 使用略。  删除器   shared_ptr可以自定义删除器（deleter），用来定义释放行为. 学习到删除器时，有个疑问是其类型在哪里定义的，查看boost的实现如下： 可以看出，shared_ptr的模板参数只有指针对象的类型T：
template&amp;lt;class T&amp;gt; class shared_ptr { private: // Borland 5.5.1 specific workaround typedef shared_ptr&amp;lt;T&amp;gt; this_type; public: .... 删除器类型是在构造函数定义中带进来的：
template&amp;lt;class Y&amp;gt; explicit shared_ptr( Y * p ): px( p ), pn() // Y must be complete { boost::detail::sp_pointer_construct( this, p, pn ); } // // Requirements: D&#39;s copy constructor must not throw // // shared_ptr will release p by calling d(p) // // 构造函数只需要提供Y作为模板类型参数， // D不需要提供，可由构造函数的第二个参数推导得到 template&amp;lt;class Y, class D&amp;gt; shared_ptr( Y * p, D d ): px( p ), pn( p, d ) { boost::detail::sp_deleter_construct( this, p ); } .</description>
    </item>
    
    <item>
      <title>算法笔记： 最长回文子串</title>
      <link>/posts/algmnotes-longestpalindrome/</link>
      <pubDate>Sat, 01 Dec 2018 21:26:49 +0800</pubDate>
      
      <guid>/posts/algmnotes-longestpalindrome/</guid>
      <description>&lt;p&gt;这是读书时一篇旧文搬运.几年后再次回顾下算法.&lt;/p&gt;
&lt;h3 id=&#34;描述&#34;&gt;描述&lt;/h3&gt;
&lt;p&gt;给定一个串，求它的最长回文子串。&lt;/p&gt;
&lt;h3 id=&#34;dp思路&#34;&gt;DP思路&lt;/h3&gt;
&lt;p&gt;DP的关键是梳理出问题与子问题的关系。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;F[i,j]&lt;/code&gt;表示i..j的最长回文串的长度，那么跟其子问题的关系如下：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>算法笔记：计算1到n中2出现的个数</title>
      <link>/posts/algmnotes-count_2_of_a_number/</link>
      <pubDate>Fri, 01 Jun 2018 20:26:39 +0800</pubDate>
      
      <guid>/posts/algmnotes-count_2_of_a_number/</guid>
      <description>这是读书时一篇旧文搬运.几年后再次回顾下算法.
问题 给定一个数字n，求1到n序列中2出现的总次数。n最大值可能是10^9。
思路 暴力 依次求解1..n每个数含有多少个2，最后求和。
给定数字n，其位数（10进制）为logn，具体的时间复杂度大致如下：
$T(n) = log_{10}n + log_{10}{(n-1)} + &amp;hellip; + log_{10}{1} = log_{10}{n!} = O(log_{10}{n!})$
$\Rightarrow $
$T(n) = O(log{n^n}) = O(nlogn)$
所以，暴力法时间复杂度是nlogn的
数位枚举 换一个枚举思路，正常的枚举是 i -&amp;gt; i+1 -&amp;gt; i+2 &amp;hellip;这样,现采用数位遍历的方式，假设n是K位数,所有出现的2，出现的位置只能在这个范围内：[0,K-1]。（从0开始比较好算） 所以问题可以转变为：对于每个$d\in[0,K-1]$,求符合条件为$\in[1,n]$且第d位为2的数字的个数和$S_d$. 最后累加$\sum_{d=1}^KS_d$.
对于第d位为2的数字个数如何求解？很容易我们可以归纳出数字个数与第d位数字与2的大小关系有关：
PS: 以下的d是从0开始取的。
给定n，假设第d位数字小于2,举个例子：
n = 716130, d = 2， 第d位数字为1，该位为2且满足小于等于n的数字是：200 - 299， 1200 - 1299， 2200 - 2299， &amp;hellip;, 715200 - 715299，显然有716 * 100个，规约一下有: $$ S_d = n / 10^{d+1} * 10^d \qquad \text{if} \ digit(d,n) \lt2 $$</description>
    </item>
    
    <item>
      <title>分布式笔记 - Raft（1）</title>
      <link>/posts/storage_deep_dive_for_raft/lec1/</link>
      <pubDate>Thu, 19 Apr 2018 21:20:49 +0000</pubDate>
      
      <guid>/posts/storage_deep_dive_for_raft/lec1/</guid>
      <description>Q&amp;amp;A 线性一致性？ 个人认为，分布式系统的一致性与多核内存模型中涉及的一致性异曲同工，所以分布式系统的线性一致性我认为可以参考类似多核系统的线性一致性定义来理解。
fsm: finite-state-machine 个人理解为有状态分布式服务的每个独立实例（进程+数据），本质上都可以是个有限状态机（fsm） 一个存储服务往往采用分片方式来横向扩容，每个分片中采用多个实例来保证高可用，这些实例某种程度上是一致的，可以称为replicated fsm.
log entry和log分别是？ 所有写入日志称为log 某条写入日志称为log entry
commit和apply分别指什么？ a log entry is committed是指某条log已被确认到达大多数节点. a log is applied是指某条日志已被fsm执行.
leader回应client的时间点？ 一个日志的生命周期主要有几个时间点：
 leader本地写入log成功 被leader标记为commited 被leader标记为applied  论文的$5.3节说明，在applied之后(fsm执行后才能拿到结果)才将结果返回至client.
 When the entry has been safely replicated (as described below), the leader applies the entry to its state machine and returns the result of that execution to the client.
 RPC-RequestVote里，为什么带了最后一个日志项（log entry）的下标和它的term（而不是commitIndex或applyIndex对应的日志项） xuya
voteFor如何维护的？（例如: 什么时候重置为null? 当followergrant了某个候选者之后，voteFor如何处理？） 这个问题论文里并没有具体进行讨论
currentTerm如何维护的？（例如：在选举阶段，当followergrant某个候选者之后，是否需要修改自己的currentTerm? 如果选举阶段不修改，那么连续两次选举（上一次SplitVote）如何处理？） 这个问题论文里并没有具体进行讨论</description>
    </item>
    
    <item>
      <title>Todo list</title>
      <link>/posts/other_todolist/</link>
      <pubDate>Tue, 07 Nov 2017 02:26:41 +0800</pubDate>
      
      <guid>/posts/other_todolist/</guid>
      <description> pb使用总结:动态类型反射/non-copy 运维总结:huge page 运维总结:tcpdump抓包 运维总结:tsar/sar/iotop/iostat/top/perf top db笔记：lsm和btree的读/写放大分析 db笔记：事务 &amp;ndash;&amp;gt; doing db笔记：分布式事务 db笔记：2pc和percalator db笔记：paxos cpp笔记：一些常见的oop设计模式 cpp笔记：rvalue-reference cpp笔记：内存序和内存屏障v2  </description>
    </item>
    
    <item>
      <title>cheatsheet for FUW</title>
      <link>/posts/other_frequently-used-words/</link>
      <pubDate>Mon, 07 Nov 2016 21:20:49 +0000</pubDate>
      
      <guid>/posts/other_frequently-used-words/</guid>
      <description>some words used in coding  toggle quote snippet typo delimiter bundle anchor dangle populate instrumentation increases monotonically 单调递增 dense 密集 subtle 巧妙 preceding 在..之前 increases monotonically 单调递增 intuitive decent preceding durable deterministic recall sufficient sketch contradiction idempotent inevitably incorporate provision complement versatility pivot 支点  cplusplus concepts:
 pod types non-trivial types  </description>
    </item>
    
    <item>
      <title>Life</title>
      <link>/menus/life-notes/</link>
      <pubDate>Fri, 07 Oct 2016 21:26:49 +0800</pubDate>
      
      <guid>/menus/life-notes/</guid>
      <description>Life Topics  to be continue&amp;hellip;  </description>
    </item>
    
    <item>
      <title>Work</title>
      <link>/menus/work-notes/</link>
      <pubDate>Fri, 07 Oct 2016 21:26:49 +0800</pubDate>
      
      <guid>/menus/work-notes/</guid>
      <description>Work Topics  c++ debuging database system distribution system to be continue&amp;hellip;  </description>
    </item>
    
    <item>
      <title>关于</title>
      <link>/menus/about/</link>
      <pubDate>Fri, 07 Oct 2016 21:26:49 +0800</pubDate>
      
      <guid>/menus/about/</guid>
      <description>about this is a place to meet myself.</description>
    </item>
    
    <item>
      <title>随想2</title>
      <link>/posts/other_thinkings/</link>
      <pubDate>Mon, 19 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>/posts/other_thinkings/</guid>
      <description>  下面是一个hugo图像处理的示意 代码为    .Resize &#34;300x&#34;       .Resize &#34;300x&#34;      随想1
  </description>
    </item>
    
    <item>
      <title>随想</title>
      <link>/posts/other_thoughts_about_life/</link>
      <pubDate>Tue, 20 Dec 2011 07:26:49 +0800</pubDate>
      
      <guid>/posts/other_thoughts_about_life/</guid>
      <description>杂 1 既然所有的生命都要死亡，那么生命的意义是什么？
 在 bug 中寻找圆满 冯伦被误诊为癌症，那是他第一次开始思考死亡，以前很重视的事情都变得轻了，最沉重的，还是生命。 死亡带来意义，而非消解意义 唯有自杀才是唯一值得探讨的问题——加缪 拒绝意义追问是怯懦的表现 幸福不过是欲望的暂时停止。我们就像田野上的羔羊，在屠夫的注视下恣意欢愉。  </description>
    </item>
    
    <item>
      <title>启用一个新blog（Hugo试用）</title>
      <link>/posts/other_try-hugo/</link>
      <pubDate>Mon, 07 Nov 2011 21:26:49 +0800</pubDate>
      
      <guid>/posts/other_try-hugo/</guid>
      <description>Hugo 试用  基本流程走通：post &amp;ndash; publish basic configs basic markdown config the markup(code pieces) insert an image by ref as in static or by a shortcode organizations (page resources/bundles, )  Shortcode A shortcode is a simple snippet inside a content file that Hugo will render using a predefined template. Note that shortcodes will not work in template files.
  DeviantArt   Test for markdown   a1</description>
    </item>
    
    <item>
      <title></title>
      <link>/posts/db_dailywork_cheatsheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/db_dailywork_cheatsheet/</guid>
      <description>cheatsheet my cheatsheet for daily work usages.
  ps
  top
  tasr
  sar
  iostat
  iotop
  iftop
  netstat
  tcpdump
  Makefile
  systemtap
  py scripts snippet
  gcc
  others
 system supervisor system crontab settings    </description>
    </item>
    
    <item>
      <title>c&#43;&#43; notes：recall of move-semantics and rvalue-reference</title>
      <link>/posts/cppnotes-move-semantics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/cppnotes-move-semantics/</guid>
      <description>Universal Reference   Q: 什么是Universal Reference? A: 形如T&amp;amp;&amp;amp;, T不含有任何的cv限定符, 且T需要被推导 G1.
 If a variable or parameter is declared to have type T&amp;amp;&amp;amp; for some deduced type T, that variable or parameter is a universal reference.
   examples:
  using Widget = int; Widget&amp;amp;&amp;amp; var1 = Widget(); //不是`Universal Reference`，因为`T&amp;amp;&amp;amp;`不是个需要被推导的类型,`T`是`Widget`. //实际上var1的类型是个右值引用. auto&amp;amp;&amp;amp; var2 = var1; //是`Universal Reference`，那么var2的类型是什么？请看下文 rvalue or lvalue  什么是左值/右值？ G2.  If you can take the address of an expression, the expression is an lvalue.</description>
    </item>
    
    <item>
      <title>c&#43;&#43;笔记：STL容器迭代器失效场景</title>
      <link>/posts/cppnotes-iterator-invalidation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/cppnotes-iterator-invalidation/</guid>
      <description>CheatSheet (完整版见下面 Ref1 or cppref) note:
 顺序型容器
  deque插入or删除操作会导致迭代器失效. list则不会（参考其实现）（迭代器&amp;amp;元素的引用都不会随着插入/删除操作而失效）.    关联型容器
  迭代器和元素引用的有效性不受影响    unordered关联型容器
  rehash时会失效迭代器   stl的list  实现上是双向链表 迭代器是a bidirectional iterator to value_type size()时间复杂度：c++98的最坏时间复杂度为O(n)， c++11则是常数时间。    另外有什么办法可以移动链表节点呢？（像我们自己实现一个双向链表那样,挪动几个指针）  +---+ --&amp;gt; +---+ --&amp;gt; +---+ | a | | b | | c | a -&amp;gt; b -&amp;gt; c +---+ &amp;lt;-- +---+ &amp;lt;-- +---+ +------------------------+ | | +---+ +---+ &amp;lt;-- +---+ &amp;lt;--+ | a | | b | | c | a -&amp;gt; c -&amp;gt; b +---+ &amp;lt;-+ +---+ --&amp;gt; +---+ ---+ | | +--------------------+ splice()应该可以达到这个目的:</description>
    </item>
    
    <item>
      <title>c&#43;&#43;笔记：STL相关</title>
      <link>/posts/cppnotes-stl-misc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/cppnotes-stl-misc/</guid>
      <description>this is a post of misc items of stl.
  behavior of operator[] of vector and map:
  auto in for-statement:
   </description>
    </item>
    
    <item>
      <title>db笔记 - 事务1:隔离级别</title>
      <link>/posts/db_txn_lec1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/db_txn_lec1/</guid>
      <description>锁 read lock write lock long duration lock short duration lock predicate lock
history SQL-92 &amp;ndash;&amp;gt; SQL-95:
an overview of isolation degree   P0(Dirty Write)
  Read Uncommited
  P1(Dirty Read)
  Read Commited
  P4C(Lost Update of Cursor)
  Cursor Stability
  P4(Lost Update)
  P2(Non-Repeatable Read)
  Repeatable Read
  P3(Phantom)
  Serializable
  Snapshot Isolation(Sql-95)</description>
    </item>
    
    <item>
      <title>systemtap笔记</title>
      <link>/posts/debugging_systemtap_cheatsheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/debugging_systemtap_cheatsheet/</guid>
      <description></description>
    </item>
    
    <item>
      <title>笔记：systemtap相关</title>
      <link>/posts/debugging_use-systemtap-to-debug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/debugging_use-systemtap-to-debug/</guid>
      <description>本文会提及systemtap的以下几点：
 如何列出某个可执行文件的所有probe位点 如何取变量的值 如何通过某个地址的解引用取得对应值 如何在.return中拿到变量的最新值 如何自定义用户态程序probe位点 如何指定probe被调用的频率（命中次数/命中间隔时间） 如何使用外部参数传入*.stp  topic1 - quick start topic2 - how to track a var at probe point of func.call &amp;amp; func.return topic3 - how to mock a syscall </description>
    </item>
    
  </channel>
</rss>
